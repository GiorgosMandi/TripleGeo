##############################
## Configuration for TripleGeo ver.1.4 in order to transform data from GPX files (GPS waypoints and tracks) into RDF triples.
## EXAMPLE COMMAND: java -cp target/triplegeo-1.4-SNAPSHOT.jar eu.slipo.athenarc.triplegeo.Extractor ./test/conf/GPX_options.conf
##############################

##############################
# Input and output parameters (paths are RELATIVE to executable)
##############################

## Possible input formats: SHAPEFILE, DBMS, CSV, GPX, GEOJSON, XML, OSM
inputFormat = GPX

## Conversion mode: currently only 'STREAM' (in-memory) is applicable for GPX input files
mode = STREAM

## Paths to directories and files used by the application
## CURRENTLY SUPPORTED: You can specify MULTIPLE input files (of exactly the same format and attributes) separating them by ';' in order to activate multiple concurrent threads for their transformation.
tmpDir = ./tmp
inputFiles = ./test/data/sample.gpx
outputDir= ./test/output

## OPTIONAL parameter for the encoding (character set) for strings in the input data. If not specified, UTF-8 encoding is assumed.
encoding = UTF-8

## Possible export formats: RDF/XML (default), RDF/XML-ABBREV, N-TRIPLES, TURTLE (or TTL), N3
serialization = N-TRIPLES

## Specify the spatial ontology for geometries in the exported data. 
## Possible values: 1) GeoSPARQL, 2) Virtuoso (legacy RDF ontology for points only), 3) wgs84_pos (for WGS84 Geoposition RDF vocabulary)
targetGeoOntology = GeoSPARQL


##############################
## Mapping specification 
## Currently, NOT supported for GPX files. In STREAM mode, an RDF property will be created for each thematic attribute (tag) in the original schema, by borrowing the tag key as its name. 
##############################

mappingSpec =


##############################
## Classification scheme 
## Currently, NOT supported for GPX files.
##############################

classificationSpec =


##############################
# GPX parameters (case-insensitive)
# Change parameters to reflect the GPX attributes that will be extracted
##############################
attrKey = name
attrName = name

##############################
# Namespaces parameters
##############################
## MANDATORY parameter that specifies the data source provider of the input features
featureSource = GPX_POI_samples

##OPTIONAL parameters regarding namespaces of generated URIs:
nsOntology = http://slipo.eu/def#
nsGeometry = http://www.opengis.net/ont/geosparql#
nsFeatureURI = http://slipo.eu/id/poi/
nsClassURI = http://slipo.eu/id/term/
nsClassificationURI = http://slipo.eu/id/classification/
nsDataSourceURI = http://slipo.eu/id/poisource/

## Specify two lists (of comma separated values) with the correspondence between a prefix and its respective namespace (mainly used in attribute mappings)
prefixes = slipo, geo, xsd, rdfs, wgs84_pos
namespaces = http://slipo.eu/def#, http://www.opengis.net/ont/geosparql#, http://www.w3.org/2001/XMLSchema#, http://www.w3.org/1999/02/22-rdf-syntax-ns#, http://www.w3.org/2003/01/geo/wgs84_pos#


##############################
# Spatial Reference parameters
##############################
# For GPX data, no transformation is needed, because all input geometries must be in WGS84 reference system (EPSG:4326). So parameters regarding spatial reference systems should be not specified.

##############################
# Other parameters (optional)
##############################
# OPTIONAL parameter. Default language tag for string literals created in the output RDF. By default, the value will be English-en.
defaultLang = en
